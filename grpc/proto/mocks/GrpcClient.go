// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import lsvoucherds "github.com/loyalsys/voucher-datastore-service/grpc/proto"
import mock "github.com/stretchr/testify/mock"

// GrpcClient is an autogenerated mock type for the GrpcClient type
type GrpcClient struct {
	mock.Mock
}

// GetPoolStatus provides a mock function with given fields: ctx, in, opts
func (_m *GrpcClient) GetPoolStatus(ctx context.Context, in *lsvoucherds.GetPoolStatusReq, opts ...grpc.CallOption) (*lsvoucherds.GetPoolStatusRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lsvoucherds.GetPoolStatusRes
	if rf, ok := ret.Get(0).(func(context.Context, *lsvoucherds.GetPoolStatusReq, ...grpc.CallOption) *lsvoucherds.GetPoolStatusRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lsvoucherds.GetPoolStatusRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lsvoucherds.GetPoolStatusReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *GrpcClient) Ping(ctx context.Context, in *lsvoucherds.PingReq, opts ...grpc.CallOption) (*lsvoucherds.PingRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lsvoucherds.PingRes
	if rf, ok := ret.Get(0).(func(context.Context, *lsvoucherds.PingReq, ...grpc.CallOption) *lsvoucherds.PingRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lsvoucherds.PingRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lsvoucherds.PingReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Test provides a mock function with given fields: ctx, in, opts
func (_m *GrpcClient) Test(ctx context.Context, in *lsvoucherds.TestReq, opts ...grpc.CallOption) (*lsvoucherds.TestRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *lsvoucherds.TestRes
	if rf, ok := ret.Get(0).(func(context.Context, *lsvoucherds.TestReq, ...grpc.CallOption) *lsvoucherds.TestRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lsvoucherds.TestRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *lsvoucherds.TestReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadToPool provides a mock function with given fields: ctx, opts
func (_m *GrpcClient) UploadToPool(ctx context.Context, opts ...grpc.CallOption) (lsvoucherds.Grpc_UploadToPoolClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 lsvoucherds.Grpc_UploadToPoolClient
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) lsvoucherds.Grpc_UploadToPoolClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lsvoucherds.Grpc_UploadToPoolClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
